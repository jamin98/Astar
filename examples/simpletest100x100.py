#coding=utf-8

import astar as findPath
import time
import random
import copy
tm_temp = [
"####################################################################################################",
"#..................................................................................................#",
"#..................................................................................................#", 
"#..................................................................................................#", 
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#............###...................................................................................#",
"#............###..............#....................................................................#",
"#............###...................................................................................#",
"#..............................................###.................................................#",
"#..................................................................................................#",
"#.....................############...............###########.......................................#",
"#...................###............................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#.........................######............########...............................................#",
"#..............................#...................................................................#",
"#...................................................#.......#......................................#",
"#...........................................................#......##..............................#",
"#......................##...................................#......##..............................#",
"#......................##........................##.........#......................................#",
"#................................................###........#......................................#",
"#................................................###........##.....................................#",
"#..............#...............................########.....#......................................#",
"#..............#............####................######......#........####..........................#",
"#..............#............########............######......#........####..........................#",
"#..............#.....#......########............######......#........####..........................#",
"#..............#.....#...##.########............#########...#........####..........................#",
"#..............#.....#...##.#######.............#########...#......................................#",
"#..............#............#######.............#########...#......................................#",
"#..............#...########.#######.............#########...#......................................#",
"#...............................................#########...#......................................#",
"#...............................................#########..........................................#",
"#.................................................................######...........................#",
"#............................##...................................######...........................#",
"#...........................###...................................######...........................#",
"#..........................#####...............#..................######...........................#",
"#..........................#####...........#......................######...........................#",
"#..........................#####..................................#######..........................#",
"#..........................#####..................................#######..........................#",
"#..........................#####....#............#######....#.....#######..........................#",
"#..........................#####.................#######....#...#########..........................#",
"#..........................#####.................#######....#...#########..........................#",
"#..........................#####.................#######....#...#########..........................#",
"#..........................#####............................#...#########..........................#",
"#.............................#.............................#...#########..........................#",
"#.................#...........#.............................#...#########..........................#",
"#.............................#.............................#...#########..........................#",
"#.............................#.............................#...#########..........................#",
"#...............................................########....#..##..................................#",
"#...............................................########....#..##..................................#",
"#...####..................######................########....#......................................#",
"#...####..................######............############....#......................................#",
"#...####..................######............############....#......................................#",
"#...####..................######....#.......############....#......................................#",
"#.........................######............############....#......................................#",
"#.........................######............############....#......................................#",
"#.........................######................########....#......................................#",
"#...............................................########....#......................................#",
"#.......................#########...............########....#......................................#",
"#...............................................########....#......................................#",
"#..................#........................................#......................................#",
"#..................#.......##..........................##...#......................................#",
"#..................#.......##..#####.........#######...##...#......................................#",
"#..................#...........#####...............#...##...#......................................#",
"#..........................................................##......................................#",
"#...................###...................................##.......................................#",
"#.....................############....................#####........................................#",
"#.####.............................................................................................#",
"#.####.............................................................................................#",
"#.####.............................................................................................#",
"#..##........###....................................................##.............................#",
"#............###....................................................##.............................#",
"#............###...................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"#............................................###...................................................#",
"#............................................###...................................................#",
"#............................................###...................................................#",
"#............................................###...................................................#",
"#..................................................................................................#",
"#.......................................###........................................................#",
"#.......................................###........................................................#",
"#.......................................###........................................................#",
"#..................................................................................................#",
"#..................................................................................................#",
"####################################################################################################"]
#define W_H_MOVE       10 //水平或竖直移动一格的花费
#define SLANTMOVE      14 //斜向移动（沿着对角线移动方向）一格的花费
#define MAXNODECOUNT   1024 //开放列表可保存的最大节点数
#time.sleep(20)
mapWH = (100, 100)
def print_map_with_path(aSatarClass, example, origin, destination, path):
    print_str = ''
    col = 0
    while col <= mapWH[0] - 1:
        for row in range(mapWH[0]):
            Point = findPath.pyPoint() #c++ point
            Point.x = row
            Point.y = col
            if row == origin.x and col == origin.y :
                print_str += 'S'
            elif row == destination.x and col == destination.y :
                print_str += 'E'
            elif Point in path:
                print_str += '*'
            elif aSatarClass.IsOpen(Point) == True:
                print_str += '.'
            else:
                print_str += '#'
#             print_str += ' '
        print_str += '\n'
        col += 1
    print print_str
    
def createPoint(position):
    Point = findPath.pyPoint() #c++ point
    Point.x = position[0]
    Point.y = position[1]
    return Point

class MyAxingPlus():
    def __init__(self):
        self.mapWH = (100, 100)
        self.PathFinding_AStar = None
        self.mapdata = None
        self.origin = None #起点
        self.destination = None #终点
        self.path = None #所有路径
        self.InitMapdata()
        self.PathFinding_AStar = findPath.AStar()
#         mapdata = copy.deepcopy(self.mapdata)
        self.PathFinding_AStar.Init(self.mapdata,self.mapWH[0],self.mapWH[1])
        
    def InitMapdata(self):
        self.mapdata = findPath.pyIntList() #vector<int>
        for line in tm_temp:
            lineInfo = list(line)
            for pos in lineInfo:
                if pos == '#':
                    self.mapdata.append(1)
                else:
                    self.mapdata.append(0)
                    
    def ClearData(self):
        #self.PathFinding_AStar = None
        self.origin = None #起点
        self.destination = None #终点
        self.path = None #所有路径

        
    def CheckPosition(self,startPosition,endPosition):
        if startPosition is None or endPosition is None:
            return False
        
        if startPosition == endPosition:
            return False
        
        sx = startPosition[0]
        sy = startPosition[1]
        if sx < 0 or sx > self.mapWH[0] - 1 or sy < 0 or sy > self.mapWH[1] - 1:
            return False
        
        ex = endPosition[0]
        ey = endPosition[1]
        if ex < 0 or ex > self.mapWH[0] - 1 or ey < 0 or ey > self.mapWH[1] - 1:
            return False
        
        if tm_temp[sy][sx] == '#' or tm_temp[ey][ex] == '#':
            return False
        
        return True
        

    def Print_map_with_path(self,):
        print_str = ''
        col = 0
        while col <= self.mapWH[0] - 1:
            for row in range(self.mapWH[0]):
                Point = findPath.pyPoint() #c++ point
                Point.x = row
                Point.y = col
                if row == self.origin.x and col == self.origin.y :
                    print_str += 'S'
                elif row == self.destination.x and col == self.destination.y :
                    print_str += 'E'
                elif Point in self.path:
                    print_str += '*'
                elif self.PathFinding_AStar.IsOpen(Point) == True:
                    print_str += '.'
                else:
                    print_str += '#'
    #             print_str += ' '
            print_str += '\n'
            col += 1
        print print_str
                    
        
        
    def NavMesh(self,startPosition,endPosition):
        #if not self.CheckPosition(startPosition,endPosition): 
        #    return []
        
        #self.ClearData()
        
        self.origin = self.PathFinding_AStar.FindBestPoint(startPosition[0], startPosition[1])  #返回路线附近的可走区域
        self.destination = self.PathFinding_AStar.FindBestPoint(endPosition[0], endPosition[1])
        
        print self.PathFinding_AStar.IsOpen(self.origin) and self.PathFinding_AStar.IsOpen(self.destination)
        self.PathFinding_AStar.Find(self.origin.x, self.origin.y, self.destination.x, self.destination.y) #start x y  end x y
        self.path = self.PathFinding_AStar.GetAstarPath()
        road = []
        for p in self.path:
            road.append((p.x, p.y))
        return road
if __name__ == '__main__':
    myAxing = MyAxingPlus()
    
    
    while True:
        StartTime = time.time()
        startPosition = (random.randint(1,99),random.randint(1,99))
        endPosition = (random.randint(1,99),random.randint(1,99))
        #print 'startPosition:' + str(startPosition) + ' endPosition:' + str(endPosition)
        print myAxing.NavMesh(startPosition,endPosition)
        print("all time:", time.time() - StartTime)
#     myAxing.print_map_with_path()
#     print myAxing.NavMesh((1,1),(98,98))
#     myAxing.print_map_with_path()
#     print myAxing.NavMesh((98,98),(1,1))
#     myAxing.print_map_with_path()
    
    
    
    
    
