#coding=utf-8

import astar as findPath
import time
import random

tm_temp = [
'..#########################################################.',
'##.........................................................#',
'#..........................................................#',
'#..........................................................#',
'#..........................................................#',
'#.............................#............................#',
'#.............................#............................#',
'#.............................#............................#',
'#.............................#............................#',
'#.............................#............................#',
'#.............................#............................#',
'#.............................#............................#',
'#.............................#............................#',
'######.....................................................#',
'#....#........#............................................#',
'#....#........#......################################......#',
'#....##########............................................#',
'#..........................................................#',
'#..........................................................#',
'#..........................................................#',
'#...........###############################................#',
'#..........................................................#',
'#..........................................................#',
'#...............................#............#.............#',
'#...............................#............#.............#',
'#...............................#............#.............#',
'#...............................#............#.............#',
'#...............................##############.............#',
'#..........................................................#',
'#..........................................................#',
'#..........................................................#',
'#...........###########################.........##.........#',
'#...........#..............................................#',
'#...........#..............................................#',
'#...........#..............................................#',
'#...........#..............................................#',
'#...........#..............................................#',
'#...........#..............................................#',
'#............###########............################.......#',
'#..........................................................#',
'#..........................................................#',
'#..........................................................#',
'#..................################........................#',
'#..........................................................#',
'#..........................................................#',
'#..........................................................#',
'#...........#..............................................#',
'#...........#..............................................#',
'#...........#..............................................#',
'#...........##.............................................#',
'#............#.............................................#',
'#............##............................................#',
'#.............#............................................#',
'#.............#............................................#',
'#.............#............................................#',
'#.............#............................................#',
'#.............#............................................#',
'#.............#............................................#',
'#..........................................................#',
'############################################################']

#define W_H_MOVE       10 //水平或竖直移动一格的花费
#define SLANTMOVE      14 //斜向移动（沿着对角线移动方向）一格的花费
#define MAXNODECOUNT   1024 //开放列表可保存的最大节点数
#time.sleep(20)
mapWH = (60, 60)

def find_empty_coordinates(m, mapSize):
    Point = findPath.AStarExPoint() #c++ point
    Point.x = random.randint(0, mapSize)
    Point.y = random.randint(0, mapSize)
    while not m.IsOpen(Point):
        Point.x = random.randint(0, mapSize)
        Point.y = random.randint(0, mapSize)
    return Point

def print_map_with_path(aSatarClass, example, origin, destination, path):
    print_str = ''
    col = 0
    Point = findPath.AStarExPoint() #c++ point
    while col <= mapWH[0] - 1:
        for row in range(mapWH[0]):
            Point.x = row
            Point.y = col
            if row == origin.x and col == origin.y :
                print_str += 'S'
            elif row == destination.x and col == destination.y :
                print_str += 'E'
            elif Point in path:
                print_str += '*'
            elif aSatarClass.IsOpen(Point) == True:
                print_str += '.'
            else:
                print_str += '#'
#             print_str += ' '
        print_str += '\n'
        col += 1
    print print_str

def main():
    IntList = findPath.IntList() #vector<int>
    for line in tm_temp:
        lineInfo = list(line)
        lineData = []
        for pos in lineInfo:
            if pos == '#':
                IntList.append(1)
            else:
                IntList.append(0)
    PathFinding_AStar = findPath.AStarEx()
    PathFinding_AStar.Init(IntList,mapWH[0],mapWH[1])
    
    origin = find_empty_coordinates(PathFinding_AStar, mapWH[0]-1)
    destination = find_empty_coordinates(PathFinding_AStar, mapWH[0]-1)

    StartTime = time.time()
    PathFinding_AStar.Find(origin.x, origin.y, destination.x, destination.y) #start x y  end x y
    print("Pathfinding take time:", time.time()-StartTime)
    Point = findPath.AStarExPoint() #c++ point
    Point.x = 1
    Point.y = 1
    print "Whether route to go:", PathFinding_AStar.IsOpen(Point) #是否可走
    Path = PathFinding_AStar.GetAstarPath()
    print "The path provided by the A* algorithm from", (origin.x, origin.y), "to", (destination.x,destination.y), "is:", 
    for p in Path:
        print (p.x, p.y),
    print ''
    print_map_with_path(PathFinding_AStar, IntList, origin, destination, Path)

if __name__ == '__main__':
    main()
    
    
    
